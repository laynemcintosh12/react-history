{"ast":null,"code":"var _s = $RefreshSig$();\n// useJokeFetcher.js\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useJokeFetcher = numJokesToGet => {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const getJokes = async () => {\n    try {\n      let newJokes = [];\n      let seenJokes = new Set();\n      while (newJokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          joke,\n          id\n        } = res.data;\n        if (!seenJokes.has(id)) {\n          seenJokes.add(id);\n          newJokes.push({\n            joke,\n            id,\n            votes: 0\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n      setJokes(newJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const generateNewJokes = () => {\n    setIsLoading(true);\n    getJokes();\n  };\n  useEffect(() => {\n    getJokes();\n  }, [getJokes()]);\n  return {\n    jokes,\n    isLoading,\n    generateNewJokes,\n    setJokes\n  };\n};\n_s(useJokeFetcher, \"+iu6xHPOscTV/FNdMPqy/q1M2A4=\");\nexport default useJokeFetcher;","map":{"version":3,"names":["useState","useEffect","axios","useJokeFetcher","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","newJokes","seenJokes","Set","length","res","get","headers","Accept","joke","id","data","has","add","push","votes","console","log","err","error","generateNewJokes"],"sources":["/home/laynemcintosh12/Springboard/react-jokes-classes/react-jokes-classes/src/hooks/useJokeFetcher.js"],"sourcesContent":["// useJokeFetcher.js\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useJokeFetcher = (numJokesToGet) => {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getJokes = async () => {\n    try {\n      let newJokes = [];\n      let seenJokes = new Set();\n\n      while (newJokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { joke, id } = res.data;\n\n        if (!seenJokes.has(id)) {\n          seenJokes.add(id);\n          newJokes.push({ joke, id, votes: 0 });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n\n      setJokes(newJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const generateNewJokes = () => {\n    setIsLoading(true);\n    getJokes();\n  }\n\n  useEffect(() => {\n    getJokes();\n  }, [getJokes()]);\n\n  return { jokes, isLoading, generateNewJokes, setJokes };\n}\n\nexport default useJokeFetcher;\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,GAAIC,aAAa,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMU,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAIC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;MAEzB,OAAOF,QAAQ,CAACG,MAAM,GAAGV,aAAa,EAAE;QACtC,IAAIW,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,4BAA4B,EAAE;UACtDC,OAAO,EAAE;YAAEC,MAAM,EAAE;UAAmB;QACxC,CAAC,CAAC;QACF,IAAI;UAAEC,IAAI;UAAEC;QAAG,CAAC,GAAGL,GAAG,CAACM,IAAI;QAE3B,IAAI,CAACT,SAAS,CAACU,GAAG,CAACF,EAAE,CAAC,EAAE;UACtBR,SAAS,CAACW,GAAG,CAACH,EAAE,CAAC;UACjBT,QAAQ,CAACa,IAAI,CAAC;YAAEL,IAAI;YAAEC,EAAE;YAAEK,KAAK,EAAE;UAAE,CAAC,CAAC;QACvC,CAAC,MAAM;UACLC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACjC;MACF;MAEApB,QAAQ,CAACI,QAAQ,CAAC;MAClBF,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOmB,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;IACpB;EACF,CAAC;EAED,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7BrB,YAAY,CAAC,IAAI,CAAC;IAClBC,QAAQ,CAAC,CAAC;EACZ,CAAC;EAEDT,SAAS,CAAC,MAAM;IACdS,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhB,OAAO;IAAEJ,KAAK;IAAEE,SAAS;IAAEsB,gBAAgB;IAAEvB;EAAS,CAAC;AACzD,CAAC;AAAAF,EAAA,CAxCKF,cAAc;AA0CpB,eAAeA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}