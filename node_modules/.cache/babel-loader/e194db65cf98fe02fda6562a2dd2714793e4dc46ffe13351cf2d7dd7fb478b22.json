{"ast":null,"code":"var _jsxFileName = \"/home/laynemcintosh12/Springboard/react-jokes-classes/react-jokes-classes/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// refactored to a functional component \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JokeList = ({\n  numJokesToGet = 5\n}) => {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  /* retrieve jokes from API */\n\n  const getJokes = async () => {\n    try {\n      // load jokes one at a time, adding not-yet-seen jokes\n      let newJokes = [];\n      let seenJokes = new Set();\n      while (newJokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          joke,\n          id\n        } = res.data;\n        if (!seenJokes.has(id)) {\n          seenJokes.add(id);\n          newJokes.push({\n            joke,\n            id,\n            votes: 0\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n      setJokes(newJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  const generateNewJokes = () => {\n    setIsLoading(true);\n    getJokes();\n  };\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  const vote = (id, delta) => {\n    setJokes(allJokes => allJokes.map(j => j.id === id ? {\n      ...j,\n      votes: j.votes + delta\n    } : j));\n  };\n\n  /* effect to get jokes on mount */\n\n  useEffect(() => {\n    getJokes();\n  }, []);\n\n  /* render: either loading spinner or list of sorted jokes. */\n\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-4x fa-spinner fa-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: generateNewJokes,\n        children: \"Get New Jokes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), sortedJokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n        text: j.joke,\n        id: j.id,\n        votes: j.votes,\n        vote: vote\n      }, j.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(JokeList, \"+iu6xHPOscTV/FNdMPqy/q1M2A4=\");\n_c = JokeList;\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","newJokes","seenJokes","Set","length","res","get","headers","Accept","joke","id","data","has","add","push","votes","console","log","err","error","generateNewJokes","vote","delta","allJokes","map","j","sortedJokes","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","_c","$RefreshReg$"],"sources":["/home/laynemcintosh12/Springboard/react-jokes-classes/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n\n\n// refactored to a functional component \n\nconst JokeList = ({ numJokesToGet = 5 }) => {\n\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  /* retrieve jokes from API */\n\n  const getJokes = async () => {\n    try {\n      // load jokes one at a time, adding not-yet-seen jokes\n      let newJokes = [];\n      let seenJokes = new Set();\n\n      while (newJokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { joke, id } = res.data;\n\n        if (!seenJokes.has(id)) {\n          seenJokes.add(id);\n          newJokes.push({ joke, id, votes: 0 });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n\n      setJokes(newJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  const generateNewJokes = () => {\n    setIsLoading(true);\n    getJokes();\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  const vote = (id, delta) => {\n    setJokes(allJokes => allJokes.map(\n      j => j.id === id ? { ...j, votes: j.votes + delta } : j\n    ));\n  }\n\n  /* effect to get jokes on mount */\n\n  useEffect(() => {\n    getJokes();\n  }, []);\n\n  /* render: either loading spinner or list of sorted jokes. */\n\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n  return (\n    <div className=\"JokeList\">\n\n      {isLoading ?\n        <div className=\"loading\">\n          <i className=\"fas fa-4x fa-spinner fa-spin\" />\n        </div>\n        :\n        <div>\n          <button\n            className=\"JokeList-getmore\"\n            onClick={generateNewJokes}\n          >\n            Get New Jokes\n          </button>\n\n          {sortedJokes.map(j => (\n            <Joke\n              text={j.joke}\n              key={j.id}\n              id={j.id}\n              votes={j.votes}\n              vote={vote}\n            />\n          ))}\n        </div>\n      }\n\n    </div>\n  );\n}\n\nexport default JokeList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}